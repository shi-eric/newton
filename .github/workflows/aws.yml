name: AWS

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
  pull_request:

jobs:
  run-unit-tests-on-aws:
    runs-on: ubuntu-latest
    outputs:
      instance_id: ${{ steps.launch.outputs.instance_id }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::968945269301:role/shi-eric-newton-github-actions-role-Role-iSChcyjwxpNX

      - name: Launch EC2 instance with latest NVIDIA AMI
        id: launch
        run: |
          echo "Finding the latest NVIDIA GPU Cloud VMI..."
          LATEST_AMI_ID=$(aws ec2 describe-images --region us-east-2 \
            --owners amazon \
            --filters 'Name=name,Values=Deep Learning Base OSS Nvidia Driver GPU AMI (Ubuntu 24.04) ????????' 'Name=state,Values=available' \
            --query 'reverse(sort_by(Images, &CreationDate))[:1].ImageId' \
            --output text)

          echo "Latest AMI ID found: $LATEST_AMI_ID"
          echo "Launching EC2 instance..."

          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id $LATEST_AMI_ID \
            --region us-east-2 \
            --instance-type g4dn.xlarge \
            --security-group-ids sg-0fabb702b9152ed06 \
            --block-device-mappings "DeviceName=/dev/sda1,Ebs={VolumeSize=128,VolumeType=gp3}" \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=newton-github-workflow-runner}]' \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "Instance launched with ID: $INSTANCE_ID"
          echo "INSTANCE_ID=$INSTANCE_ID" >> "$GITHUB_ENV"
          echo "instance_id=$INSTANCE_ID" >> "$GITHUB_OUTPUT"

          echo "Creating ephemeral SSH key..."
          ssh-keygen -t ed25519 -f ./temp_key -N ""

          echo "Waiting for instance to be running..."
          aws ec2 wait instance-status-ok --instance-ids $INSTANCE_ID

      - name: Create and Run Remote Script
        run: |
          # 1. Create the script locally
          cat << 'EOF' > run_tests.sh
          #!/bin/bash
          set -e

          echo "--- Starting sequence on EC2 instance ---"
          date

          echo "--- Checking NVIDIA driver status ---"
          nvidia-smi || echo "nvidia-smi command failed. Driver may not be installed."

          curl -LsSf https://astral.sh/uv/install.sh | sh
          source $HOME/.local/bin/env

          # --- Configuration ---
          REPO_URL="https://github.com/${{ github.repository }}.git"
          BRANCH_NAME="${{ github.head_ref }}"
          REPO_DIR="${{ github.event.repository.name }}"

          # --- Cloning Repository ---
          echo "Cloning repository: $REPO_URL"
          echo "Branch: $BRANCH_NAME"
          git clone --branch "$BRANCH_NAME" "$REPO_URL"
          cd "$REPO_DIR"
          echo "Successfully cloned and entered repository."

          # --- Running Tests ---
          echo "Running Newton test suite..."
          uv run --extra dev -m newton.tests --junit-report-xml /tmp/rspec.xml --coverage --coverage-xml /tmp/coverage.xml -p 'test_model.py'
          echo "--- Tests complete! ---"

          echo "--- Sequence complete ---"
          EOF

          # Get the instance's public IP address
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID \
            --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "Instance IP: $PUBLIC_IP"

          # Get the instance's Availability Zone
          AVAILABILITY_ZONE=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID \
            --query "Reservations[0].Instances[0].Placement.AvailabilityZone" --output text)

          echo "Pushing temporary SSH key to instance (1/2)..."
          aws ec2-instance-connect send-ssh-public-key \
            --instance-id $INSTANCE_ID \
            --instance-os-user ubuntu \
            --availability-zone $AVAILABILITY_ZONE \
            --ssh-public-key file://./temp_key.pub

          echo "Copying script to instance..."
          scp -o "StrictHostKeyChecking=no" -i ./temp_key ./run_tests.sh ubuntu@$PUBLIC_IP:/tmp/run_tests.sh

          echo "Executing script on instance..."
          ssh -o "StrictHostKeyChecking=no" -i ./temp_key ubuntu@$PUBLIC_IP "cd /tmp && chmod +x /tmp/run_tests.sh && /tmp/run_tests.sh"

          echo "Pushing temporary SSH key to instance (2/2)..."
          aws ec2-instance-connect send-ssh-public-key \
            --instance-id $INSTANCE_ID \
            --instance-os-user ubuntu \
            --availability-zone $AVAILABILITY_ZONE \
            --ssh-public-key file://./temp_key.pub

          echo "Downloading test results..."
          scp -o "StrictHostKeyChecking=no" -i ./temp_key ubuntu@$PUBLIC_IP:/tmp/coverage.xml ./coverage.xml || echo "coverage.xml not found"
          scp -o "StrictHostKeyChecking=no" -i ./temp_key ubuntu@$PUBLIC_IP:/tmp/rspec.xml ./rspec.xml || echo "rspec.xml not found"

      - name: Test Summary
        uses: test-summary/action@31493c76ec9e7aa675f1585d3ed6f1da69269a86
        with:
          paths: "rspec.xml"
          show: "fail"
        if: always()

  cleanup:
    name: Cleanup EC2 Instance
    runs-on: ubuntu-latest
    needs: run-unit-tests-on-aws
    if: always()
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::968945269301:role/shi-eric-newton-github-actions-role-Role-iSChcyjwxpNX

      - name: Terminate EC2 Instance
        if: needs.run-unit-tests-on-aws.outputs.instance_id != ''
        run: |
          echo "Terminating instance: ${{ needs.run-unit-tests-on-aws.outputs.instance_id }}"
          aws ec2 terminate-instances --instance-ids ${{ needs.run-unit-tests-on-aws.outputs.instance_id }}
